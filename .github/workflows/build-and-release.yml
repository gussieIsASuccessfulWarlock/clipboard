name: Build and Release

permissions:
  contents: write

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            distro: ubuntu
            container: ubuntu:22.04
            install: apt-get update && apt-get install -y libgtk-3-dev pkg-config g++ make
          - os: ubuntu-latest
            arch: x86_64
            distro: debian
            container: debian:latest
            install: apt-get update && apt-get install -y libgtk-3-dev pkg-config g++ make
          - os: ubuntu-latest
            arch: x86_64
            distro: fedora
            container: fedora:latest
            install: dnf install -y gtk3-devel pkgconfig gcc-c++ make
          - os: ubuntu-latest
            arch: x86_64
            distro: centos
            container: quay.io/centos/centos:stream9
            install: dnf install -y gtk3-devel pkgconfig gcc-c++ make
          - os: ubuntu-latest
            arch: x86_64
            distro: alpine
            container: alpine:latest
            install: apk add gtk+3.0-dev pkgconfig g++ make
          - os: ubuntu-22.04-arm
            arch: arm64
            distro: ubuntu
            container: ubuntu:22.04
            install: apt-get update && apt-get install -y libgtk-3-dev pkg-config g++ make
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: ${{ matrix.install }}

    - name: Build
      run: make

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: clipboard-${{ matrix.distro }}-${{ matrix.arch }}
        path: clipboard

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Set release metadata
      run: |
        if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
          echo "RELEASE_TAG=nightly" >> $GITHUB_ENV
          echo "RELEASE_NAME=Nightly (main)" >> $GITHUB_ENV
          echo "RELEASE_DRAFT=true" >> $GITHUB_ENV
          echo "RELEASE_PRERELEASE=true" >> $GITHUB_ENV
          echo "RELEASE_HEADER=## Development Release" >> $GITHUB_ENV
          echo "RELEASE_SUBHEADER=Built from latest main branch commit." >> $GITHUB_ENV
        else
          echo "RELEASE_TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release ${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "RELEASE_DRAFT=false" >> $GITHUB_ENV
          echo "RELEASE_PRERELEASE=false" >> $GITHUB_ENV
          echo "RELEASE_HEADER=## Release ${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "RELEASE_SUBHEADER=" >> $GITHUB_ENV
        fi

    - name: Prepare artifacts
      run: |
        mkdir -p dist
        for dir in artifacts/*; do
          if [ -d "$dir" ]; then
            name=$(basename "$dir")
            file="$dir/clipboard"
            if [ -f "$file" ]; then
              target="dist/clipboard-${name}"
              cp "$file" "$target"
              chmod +x "$target"
            fi
          fi
        done

    - name: Generate release body
      run: |
        echo "${RELEASE_HEADER}" > body.md
        if [ -n "${RELEASE_SUBHEADER}" ]; then
          echo "${RELEASE_SUBHEADER}" >> body.md
        fi
        echo "" >> body.md
        echo "Built executables for various Linux distributions:" >> body.md
        shopt -s nullglob
        for file in dist/clipboard-*; do
          base=$(basename "$file")
          distro=$(echo "$base" | cut -d'-' -f2)
          arch=$(echo "$base" | cut -d'-' -f3)
          echo "- ${base}: Executable for ${distro} ${arch}" >> body.md
        done

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        body_path: body.md
        tag_name: ${{ env.RELEASE_TAG }}
        name: ${{ env.RELEASE_NAME }}
        draft: ${{ env.RELEASE_DRAFT == 'true' }}
        prerelease: ${{ env.RELEASE_PRERELEASE == 'true' }}
        replace_assets: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}